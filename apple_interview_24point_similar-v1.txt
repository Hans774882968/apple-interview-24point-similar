0 0
ansSet.size() = 0
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[].every((v) => v === 6);
1 0
ansSet.size() = 0
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[].every((v) => v === 6);
2 1
ansSet.size() = 152
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[((2) * (2)) + (2), ((2) * (2)) + (fac(2)), ((2) * (2)) ^ (2), ((2) * (2)) ^ (fac(2)), ((2) * (2)) | (2), ((2) * (2)) | (fac(2)), ((2) * (fac(2))) + (2), ((2) * (fac(2))) + (fac(2)), ((2) * (fac(2))) ^ (2), ((2) * (fac(2))) ^ (fac(2)), ((2) * (fac(2))) | (2), ((2) * (fac(2))) | (fac(2)), ((2) ** (2)) + (2), ((2) ** (2)) + (fac(2)), ((2) ** (2)) ^ (2), ((2) ** (2)) ^ (fac(2)), ((2) ** (2)) | (2), ((2) ** (2)) | (fac(2)), ((2) ** (fac(2))) + (2), ((2) ** (fac(2))) + (fac(2)), ((2) ** (fac(2))) ^ (2), ((2) ** (fac(2))) ^ (fac(2)), ((2) ** (fac(2))) | (2), ((2) ** (fac(2))) | (fac(2)), ((2) + (2)) + (2), ((2) + (2)) + (fac(2)), ((2) + (2)) ^ (2), ((2) + (2)) ^ (fac(2)), ((2) + (2)) | (2), ((2) + (2)) | (fac(2)), ((2) + (fac(2))) + (2), ((2) + (fac(2))) + (fac(2)), ((2) + (fac(2))) ^ (2), ((2) + (fac(2))) ^ (fac(2)), ((2) + (fac(2))) | (2), ((2) + (fac(2))) | (fac(2)), ((2) << (2)) - (2), ((2) << (2)) - (fac(2)), ((2) << (fac(2))) - (2), ((2) << (fac(2))) - (fac(2)), ((fac(2)) * (2)) + (2), ((fac(2)) * (2)) + (fac(2)), ((fac(2)) * (2)) ^ (2), ((fac(2)) * (2)) ^ (fac(2)), ((fac(2)) * (2)) | (2), ((fac(2)) * (2)) | (fac(2)), ((fac(2)) * (fac(2))) + (2), ((fac(2)) * (fac(2))) + (fac(2)), ((fac(2)) * (fac(2))) ^ (2), ((fac(2)) * (fac(2))) ^ (fac(2)), ((fac(2)) * (fac(2))) | (2), ((fac(2)) * (fac(2))) | (fac(2)), ((fac(2)) ** (2)) + (2), ((fac(2)) ** (2)) + (fac(2)), ((fac(2)) ** (2)) ^ (2), ((fac(2)) ** (2)) ^ (fac(2)), ((fac(2)) ** (2)) | (2), ((fac(2)) ** (2)) | (fac(2)), ((fac(2)) ** (fac(2))) + (2), ((fac(2)) ** (fac(2))) + (fac(2)), ((fac(2)) ** (fac(2))) ^ (2), ((fac(2)) ** (fac(2))) ^ (fac(2)), ((fac(2)) ** (fac(2))) | (2), ((fac(2)) ** (fac(2))) | (fac(2)), ((fac(2)) + (2)) + (2), ((fac(2)) + (2)) + (fac(2)), ((fac(2)) + (2)) ^ (2), ((fac(2)) + (2)) ^ (fac(2)), ((fac(2)) + (2)) | (2), ((fac(2)) + (2)) | (fac(2)), ((fac(2)) + (fac(2))) + (2), ((fac(2)) + (fac(2))) + (fac(2)), ((fac(2)) + (fac(2))) ^ (2), ((fac(2)) + (fac(2))) ^ (fac(2)), ((fac(2)) + (fac(2))) | (2), ((fac(2)) + (fac(2))) | (fac(2)), ((fac(2)) << (2)) - (2), ((fac(2)) << (2)) - (fac(2)), ((fac(2)) << (fac(2))) - (2), ((fac(2)) << (fac(2))) - (fac(2)), (2) + ((2) * (2)), (2) + ((2) * (fac(2))), (2) + ((2) ** (2)), (2) + ((2) ** (fac(2))), (2) + ((2) + (2)), (2) + ((2) + (fac(2))), (2) + ((fac(2)) * (2)), (2) + ((fac(2)) * (fac(2))), (2) + ((fac(2)) ** (2)), (2) + ((fac(2)) ** (fac(2))), (2) + ((fac(2)) + (2)), (2) + ((fac(2)) + (fac(2))), (2) ^ ((2) * (2)), (2) ^ ((2) * (fac(2))), (2) ^ ((2) ** (2)), (2) ^ ((2) ** (fac(2))), (2) ^ ((2) + (2)), (2) ^ ((2) + (fac(2))), (2) ^ ((fac(2)) * (2)), (2) ^ ((fac(2)) * (fac(2))), (2) ^ ((fac(2)) ** (2)), (2) ^ ((fac(2)) ** (fac(2))), (2) ^ ((fac(2)) + (2)), (2) ^ ((fac(2)) + (fac(2))), (2) | ((2) * (2)), (2) | ((2) * (fac(2))), (2) | ((2) ** (2)), (2) | ((2) ** (fac(2))), (2) | ((2) + (2)), (2) | ((2) + (fac(2))), (2) | ((fac(2)) * (2)), (2) | ((fac(2)) * (fac(2))), (2) | ((fac(2)) ** (2)), (2) | ((fac(2)) ** (fac(2))), (2) | ((fac(2)) + (2)), (2) | ((fac(2)) + (fac(2))), (fac(2)) + ((2) * (2)), (fac(2)) + ((2) * (fac(2))), (fac(2)) + ((2) ** (2)), (fac(2)) + ((2) ** (fac(2))), (fac(2)) + ((2) + (2)), (fac(2)) + ((2) + (fac(2))), (fac(2)) + ((fac(2)) * (2)), (fac(2)) + ((fac(2)) * (fac(2))), (fac(2)) + ((fac(2)) ** (2)), (fac(2)) + ((fac(2)) ** (fac(2))), (fac(2)) + ((fac(2)) + (2)), (fac(2)) + ((fac(2)) + (fac(2))), (fac(2)) ^ ((2) * (2)), (fac(2)) ^ ((2) * (fac(2))), (fac(2)) ^ ((2) ** (2)), (fac(2)) ^ ((2) ** (fac(2))), (fac(2)) ^ ((2) + (2)), (fac(2)) ^ ((2) + (fac(2))), (fac(2)) ^ ((fac(2)) * (2)), (fac(2)) ^ ((fac(2)) * (fac(2))), (fac(2)) ^ ((fac(2)) ** (2)), (fac(2)) ^ ((fac(2)) ** (fac(2))), (fac(2)) ^ ((fac(2)) + (2)), (fac(2)) ^ ((fac(2)) + (fac(2))), (fac(2)) | ((2) * (2)), (fac(2)) | ((2) * (fac(2))), (fac(2)) | ((2) ** (2)), (fac(2)) | ((2) ** (fac(2))), (fac(2)) | ((2) + (2)), (fac(2)) | ((2) + (fac(2))), (fac(2)) | ((fac(2)) * (2)), (fac(2)) | ((fac(2)) * (fac(2))), (fac(2)) | ((fac(2)) ** (2)), (fac(2)) | ((fac(2)) ** (fac(2))), (fac(2)) | ((fac(2)) + (2)), (fac(2)) | ((fac(2)) + (fac(2))), ].every((v) => v === 6);
3 1
ansSet.size() = 182
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[((3) % (3)) + (fac(3)), ((3) % (3)) ^ (fac(3)), ((3) % (3)) | (fac(3)), ((3) % (fac(3))) + (3), ((3) & (3)) + (3), ((3) & (fac(3))) * (3), ((3) & (fac(3))) | (fac(3)), ((3) * (3)) - (3), ((3) * (fac(3))) / (3), ((3) + (3)) & (fac(3)), ((3) + (3)) | (fac(3)), ((3) + (fac(3))) - (3), ((3) - (3)) + (fac(3)), ((3) - (3)) ^ (fac(3)), ((3) - (3)) | (fac(3)), ((3) / (3)) * (fac(3)), ((3) >> (3)) + (fac(3)), ((3) >> (3)) ^ (fac(3)), ((3) >> (3)) | (fac(3)), ((3) >> (fac(3))) + (fac(3)), ((3) >> (fac(3))) ^ (fac(3)), ((3) >> (fac(3))) | (fac(3)), ((3) ^ (3)) + (fac(3)), ((3) ^ (3)) ^ (fac(3)), ((3) ^ (3)) | (fac(3)), ((3) ^ (fac(3))) ^ (3), ((3) | (3)) + (3), ((3) | (fac(3))) & (fac(3)), ((fac(3)) % (3)) + (fac(3)), ((fac(3)) % (3)) ^ (fac(3)), ((fac(3)) % (3)) | (fac(3)), ((fac(3)) % (fac(3))) + (fac(3)), ((fac(3)) % (fac(3))) ^ (fac(3)), ((fac(3)) % (fac(3))) | (fac(3)), ((fac(3)) & (3)) * (3), ((fac(3)) & (3)) | (fac(3)), ((fac(3)) & (fac(3))) & (fac(3)), ((fac(3)) & (fac(3))) | (fac(3)), ((fac(3)) * (3)) / (3), ((fac(3)) * (fac(3))) / (fac(3)), ((fac(3)) + (3)) - (3), ((fac(3)) + (fac(3))) - (fac(3)), ((fac(3)) - (3)) + (3), ((fac(3)) - (fac(3))) + (fac(3)), ((fac(3)) - (fac(3))) ^ (fac(3)), ((fac(3)) - (fac(3))) | (fac(3)), ((fac(3)) / (3)) * (3), ((fac(3)) / (3)) | (fac(3)), ((fac(3)) / (fac(3))) * (fac(3)), ((fac(3)) << (3)) >> (3), ((fac(3)) << (fac(3))) >> (fac(3)), ((fac(3)) >> (3)) + (fac(3)), ((fac(3)) >> (3)) ^ (fac(3)), ((fac(3)) >> (3)) | (fac(3)), ((fac(3)) >> (fac(3))) + (fac(3)), ((fac(3)) >> (fac(3))) ^ (fac(3)), ((fac(3)) >> (fac(3))) | (fac(3)), ((fac(3)) ^ (3)) ^ (3), ((fac(3)) ^ (fac(3))) + (fac(3)), ((fac(3)) ^ (fac(3))) ^ (fac(3)), ((fac(3)) ^ (fac(3))) | (fac(3)), ((fac(3)) | (3)) & (fac(3)), ((fac(3)) | (fac(3))) & (fac(3)), ((fac(3)) | (fac(3))) | (fac(3)), (3) * ((3) & (fac(3))), (3) * ((fac(3)) & (3)), (3) * ((fac(3)) / (3)), (3) + ((3) % (fac(3))), (3) + ((3) & (3)), (3) + ((3) | (3)), (3) + ((fac(3)) - (3)), (3) - ((3) - (fac(3))), (3) << ((3) / (3)), (3) << ((fac(3)) / (fac(3))), (3) ^ ((3) ^ (fac(3))), (3) ^ ((fac(3)) ^ (3)), (fac(3)) % ((3) * (3)), (fac(3)) % ((3) * (fac(3))), (fac(3)) % ((3) ** (3)), (fac(3)) % ((3) ** (fac(3))), (fac(3)) % ((3) + (fac(3))), (fac(3)) % ((3) << (3)), (fac(3)) % ((3) << (fac(3))), (fac(3)) % ((3) | (fac(3))), (fac(3)) % ((fac(3)) * (3)), (fac(3)) % ((fac(3)) * (fac(3))), (fac(3)) % ((fac(3)) ** (3)), (fac(3)) % ((fac(3)) ** (fac(3))), (fac(3)) % ((fac(3)) + (3)), (fac(3)) % ((fac(3)) + (fac(3))), (fac(3)) % ((fac(3)) << (3)), (fac(3)) % ((fac(3)) << (fac(3))), (fac(3)) % ((fac(3)) | (3)), (fac(3)) & ((3) + (3)), (fac(3)) & ((3) | (fac(3))), (fac(3)) & ((fac(3)) & (fac(3))), (fac(3)) & ((fac(3)) | (3)), (fac(3)) & ((fac(3)) | (fac(3))), (fac(3)) * ((3) / (3)), (fac(3)) * ((fac(3)) / (fac(3))), (fac(3)) ** ((3) / (3)), (fac(3)) ** ((fac(3)) / (fac(3))), (fac(3)) + ((3) % (3)), (fac(3)) + ((3) - (3)), (fac(3)) + ((3) >> (3)), (fac(3)) + ((3) >> (fac(3))), (fac(3)) + ((3) ^ (3)), (fac(3)) + ((fac(3)) % (3)), (fac(3)) + ((fac(3)) % (fac(3))), (fac(3)) + ((fac(3)) - (fac(3))), (fac(3)) + ((fac(3)) >> (3)), (fac(3)) + ((fac(3)) >> (fac(3))), (fac(3)) + ((fac(3)) ^ (fac(3))), (fac(3)) - ((3) % (3)), (fac(3)) - ((3) - (3)), (fac(3)) - ((3) >> (3)), (fac(3)) - ((3) >> (fac(3))), (fac(3)) - ((3) ^ (3)), (fac(3)) - ((fac(3)) % (3)), (fac(3)) - ((fac(3)) % (fac(3))), (fac(3)) - ((fac(3)) - (fac(3))), (fac(3)) - ((fac(3)) >> (3)), (fac(3)) - ((fac(3)) >> (fac(3))), (fac(3)) - ((fac(3)) ^ (fac(3))), (fac(3)) / ((3) / (3)), (fac(3)) / ((fac(3)) / (fac(3))), (fac(3)) << ((3) % (3)), (fac(3)) << ((3) - (3)), (fac(3)) << ((3) << (fac(3))), (fac(3)) << ((3) >> (3)), (fac(3)) << ((3) >> (fac(3))), (fac(3)) << ((3) ^ (3)), (fac(3)) << ((fac(3)) % (3)), (fac(3)) << ((fac(3)) % (fac(3))), (fac(3)) << ((fac(3)) ** (fac(3))), (fac(3)) << ((fac(3)) - (fac(3))), (fac(3)) << ((fac(3)) << (fac(3))), (fac(3)) << ((fac(3)) >> (3)), (fac(3)) << ((fac(3)) >> (fac(3))), (fac(3)) << ((fac(3)) ^ (fac(3))), (fac(3)) >> ((3) % (3)), (fac(3)) >> ((3) - (3)), (fac(3)) >> ((3) << (fac(3))), (fac(3)) >> ((3) >> (3)), (fac(3)) >> ((3) >> (fac(3))), (fac(3)) >> ((3) ^ (3)), (fac(3)) >> ((fac(3)) % (3)), (fac(3)) >> ((fac(3)) % (fac(3))), (fac(3)) >> ((fac(3)) ** (fac(3))), (fac(3)) >> ((fac(3)) - (fac(3))), (fac(3)) >> ((fac(3)) << (fac(3))), (fac(3)) >> ((fac(3)) >> (3)), (fac(3)) >> ((fac(3)) >> (fac(3))), (fac(3)) >> ((fac(3)) ^ (fac(3))), (fac(3)) ^ ((3) % (3)), (fac(3)) ^ ((3) - (3)), (fac(3)) ^ ((3) >> (3)), (fac(3)) ^ ((3) >> (fac(3))), (fac(3)) ^ ((3) ^ (3)), (fac(3)) ^ ((fac(3)) % (3)), (fac(3)) ^ ((fac(3)) % (fac(3))), (fac(3)) ^ ((fac(3)) - (fac(3))), (fac(3)) ^ ((fac(3)) >> (3)), (fac(3)) ^ ((fac(3)) >> (fac(3))), (fac(3)) ^ ((fac(3)) ^ (fac(3))), (fac(3)) | ((3) % (3)), (fac(3)) | ((3) & (fac(3))), (fac(3)) | ((3) + (3)), (fac(3)) | ((3) - (3)), (fac(3)) | ((3) >> (3)), (fac(3)) | ((3) >> (fac(3))), (fac(3)) | ((3) ^ (3)), (fac(3)) | ((fac(3)) % (3)), (fac(3)) | ((fac(3)) % (fac(3))), (fac(3)) | ((fac(3)) & (3)), (fac(3)) | ((fac(3)) & (fac(3))), (fac(3)) | ((fac(3)) - (fac(3))), (fac(3)) | ((fac(3)) / (3)), (fac(3)) | ((fac(3)) >> (3)), (fac(3)) | ((fac(3)) >> (fac(3))), (fac(3)) | ((fac(3)) ^ (fac(3))), (fac(3)) | ((fac(3)) | (fac(3))), ].every((v) => v === 6);
4 1
ansSet.size() = 143
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[((4) % (fac(4))) + (sqrt(4)), ((4) % (fac(4))) ^ (sqrt(4)), ((4) % (fac(4))) | (sqrt(4)), ((4) & (4)) + (sqrt(4)), ((4) & (4)) ^ (sqrt(4)), ((4) & (4)) | (sqrt(4)), ((4) * (fac(4))) >> (4), ((4) * (sqrt(4))) - (sqrt(4)), ((4) + (4)) - (sqrt(4)), ((4) + (sqrt(4))) % (fac(4)), ((4) + (sqrt(4))) | (4), ((4) + (sqrt(4))) | (sqrt(4)), ((4) - (sqrt(4))) + (4), ((4) - (sqrt(4))) ^ (4), ((4) - (sqrt(4))) | (4), ((4) / (sqrt(4))) + (4), ((4) / (sqrt(4))) ^ (4), ((4) / (sqrt(4))) | (4), ((4) ^ (sqrt(4))) % (fac(4)), ((4) ^ (sqrt(4))) | (4), ((4) ^ (sqrt(4))) | (sqrt(4)), ((4) | (4)) + (sqrt(4)), ((4) | (4)) ^ (sqrt(4)), ((4) | (4)) | (sqrt(4)), ((4) | (sqrt(4))) % (fac(4)), ((4) | (sqrt(4))) | (4), ((4) | (sqrt(4))) | (sqrt(4)), ((fac(4)) & (fac(4))) / (4), ((fac(4)) & (fac(4))) >> (sqrt(4)), ((fac(4)) * (4)) >> (4), ((fac(4)) + (sqrt(4))) >> (sqrt(4)), ((fac(4)) / (4)) % (fac(4)), ((fac(4)) / (4)) | (4), ((fac(4)) / (4)) | (sqrt(4)), ((fac(4)) / (sqrt(4))) / (sqrt(4)), ((fac(4)) << (sqrt(4))) >> (4), ((fac(4)) >> (sqrt(4))) % (fac(4)), ((fac(4)) >> (sqrt(4))) | (4), ((fac(4)) >> (sqrt(4))) | (sqrt(4)), ((fac(4)) ^ (sqrt(4))) >> (sqrt(4)), ((fac(4)) | (fac(4))) / (4), ((fac(4)) | (fac(4))) >> (sqrt(4)), ((fac(4)) | (sqrt(4))) >> (sqrt(4)), ((sqrt(4)) % (4)) + (4), ((sqrt(4)) % (4)) ^ (4), ((sqrt(4)) % (4)) | (4), ((sqrt(4)) % (fac(4))) + (4), ((sqrt(4)) % (fac(4))) ^ (4), ((sqrt(4)) % (fac(4))) | (4), ((sqrt(4)) & (sqrt(4))) + (4), ((sqrt(4)) & (sqrt(4))) ^ (4), ((sqrt(4)) & (sqrt(4))) | (4), ((sqrt(4)) * (4)) - (sqrt(4)), ((sqrt(4)) * (sqrt(4))) + (sqrt(4)), ((sqrt(4)) * (sqrt(4))) ^ (sqrt(4)), ((sqrt(4)) * (sqrt(4))) | (sqrt(4)), ((sqrt(4)) ** (sqrt(4))) + (sqrt(4)), ((sqrt(4)) ** (sqrt(4))) ^ (sqrt(4)), ((sqrt(4)) ** (sqrt(4))) | (sqrt(4)), ((sqrt(4)) + (4)) % (fac(4)), ((sqrt(4)) + (4)) | (4), ((sqrt(4)) + (4)) | (sqrt(4)), ((sqrt(4)) + (fac(4))) >> (sqrt(4)), ((sqrt(4)) + (sqrt(4))) + (sqrt(4)), ((sqrt(4)) + (sqrt(4))) ^ (sqrt(4)), ((sqrt(4)) + (sqrt(4))) | (sqrt(4)), ((sqrt(4)) << (sqrt(4))) - (sqrt(4)), ((sqrt(4)) ^ (4)) % (fac(4)), ((sqrt(4)) ^ (4)) | (4), ((sqrt(4)) ^ (4)) | (sqrt(4)), ((sqrt(4)) ^ (fac(4))) >> (sqrt(4)), ((sqrt(4)) | (4)) % (fac(4)), ((sqrt(4)) | (4)) | (4), ((sqrt(4)) | (4)) | (sqrt(4)), ((sqrt(4)) | (fac(4))) >> (sqrt(4)), ((sqrt(4)) | (sqrt(4))) + (4), ((sqrt(4)) | (sqrt(4))) ^ (4), ((sqrt(4)) | (sqrt(4))) | (4), (4) + ((4) - (sqrt(4))), (4) + ((4) / (sqrt(4))), (4) + ((sqrt(4)) % (4)), (4) + ((sqrt(4)) % (fac(4))), (4) + ((sqrt(4)) & (sqrt(4))), (4) + ((sqrt(4)) | (sqrt(4))), (4) - ((sqrt(4)) - (4)), (4) ^ ((4) - (sqrt(4))), (4) ^ ((4) / (sqrt(4))), (4) ^ ((sqrt(4)) % (4)), (4) ^ ((sqrt(4)) % (fac(4))), (4) ^ ((sqrt(4)) & (sqrt(4))), (4) ^ ((sqrt(4)) | (sqrt(4))), (4) | ((4) + (sqrt(4))), (4) | ((4) - (sqrt(4))), (4) | ((4) / (sqrt(4))), (4) | ((4) ^ (sqrt(4))), (4) | ((4) | (sqrt(4))), (4) | ((fac(4)) / (4)), (4) | ((fac(4)) >> (sqrt(4))), (4) | ((sqrt(4)) % (4)), (4) | ((sqrt(4)) % (fac(4))), (4) | ((sqrt(4)) & (sqrt(4))), (4) | ((sqrt(4)) + (4)), (4) | ((sqrt(4)) ^ (4)), (4) | ((sqrt(4)) | (4)), (4) | ((sqrt(4)) | (sqrt(4))), (fac(4)) / ((4) % (fac(4))), (fac(4)) / ((4) & (4)), (fac(4)) / ((4) | (4)), (fac(4)) / ((sqrt(4)) * (sqrt(4))), (fac(4)) / ((sqrt(4)) ** (sqrt(4))), (fac(4)) / ((sqrt(4)) + (sqrt(4))), (fac(4)) >> ((4) - (sqrt(4))), (fac(4)) >> ((4) / (sqrt(4))), (fac(4)) >> ((sqrt(4)) % (4)), (fac(4)) >> ((sqrt(4)) % (fac(4))), (fac(4)) >> ((sqrt(4)) & (sqrt(4))), (fac(4)) >> ((sqrt(4)) | (sqrt(4))), (sqrt(4)) + ((4) % (fac(4))), (sqrt(4)) + ((4) & (4)), (sqrt(4)) + ((4) | (4)), (sqrt(4)) + ((sqrt(4)) * (sqrt(4))), (sqrt(4)) + ((sqrt(4)) ** (sqrt(4))), (sqrt(4)) + ((sqrt(4)) + (sqrt(4))), (sqrt(4)) ^ ((4) % (fac(4))), (sqrt(4)) ^ ((4) & (4)), (sqrt(4)) ^ ((4) | (4)), (sqrt(4)) ^ ((sqrt(4)) * (sqrt(4))), (sqrt(4)) ^ ((sqrt(4)) ** (sqrt(4))), (sqrt(4)) ^ ((sqrt(4)) + (sqrt(4))), (sqrt(4)) | ((4) % (fac(4))), (sqrt(4)) | ((4) & (4)), (sqrt(4)) | ((4) + (sqrt(4))), (sqrt(4)) | ((4) ^ (sqrt(4))), (sqrt(4)) | ((4) | (4)), (sqrt(4)) | ((4) | (sqrt(4))), (sqrt(4)) | ((fac(4)) / (4)), (sqrt(4)) | ((fac(4)) >> (sqrt(4))), (sqrt(4)) | ((sqrt(4)) * (sqrt(4))), (sqrt(4)) | ((sqrt(4)) ** (sqrt(4))), (sqrt(4)) | ((sqrt(4)) + (4)), (sqrt(4)) | ((sqrt(4)) + (sqrt(4))), (sqrt(4)) | ((sqrt(4)) ^ (4)), (sqrt(4)) | ((sqrt(4)) | (4)), ].every((v) => v === 6);
5 1
ansSet.size() = 6
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[((5) / (5)) + (5), ((fac(5)) / (fac(5))) + (5), ((fac(5)) >> (5)) ^ (5), (5) + ((5) / (5)), (5) + ((fac(5)) / (fac(5))), (5) ^ ((fac(5)) >> (5)), ].every((v) => v === 6);
6 1
ansSet.size() = 219
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[((6) % (6)) + (6), ((6) % (6)) ^ (6), ((6) % (6)) | (6), ((6) % (fac(6))) % (fac(6)), ((6) % (fac(6))) & (6), ((6) % (fac(6))) | (6), ((6) & (6)) % (fac(6)), ((6) & (6)) & (6), ((6) & (6)) | (6), ((6) & (fac(6))) + (6), ((6) & (fac(6))) ^ (6), ((6) & (fac(6))) | (6), ((6) * (6)) / (6), ((6) * (fac(6))) / (fac(6)), ((6) + (6)) - (6), ((6) + (fac(6))) % (fac(6)), ((6) + (fac(6))) & (6), ((6) + (fac(6))) - (fac(6)), ((6) + (fac(6))) ^ (fac(6)), ((6) - (6)) + (6), ((6) - (6)) ^ (6), ((6) - (6)) | (6), ((6) - (fac(6))) & (6), ((6) - (fac(6))) + (fac(6)), ((6) / (6)) * (6), ((6) << (6)) >> (6), ((6) << (fac(6))) >> (fac(6)), ((6) >> (6)) + (6), ((6) >> (6)) ^ (6), ((6) >> (6)) | (6), ((6) >> (fac(6))) + (6), ((6) >> (fac(6))) ^ (6), ((6) >> (fac(6))) | (6), ((6) ^ (6)) + (6), ((6) ^ (6)) ^ (6), ((6) ^ (6)) | (6), ((6) ^ (fac(6))) % (fac(6)), ((6) ^ (fac(6))) & (6), ((6) ^ (fac(6))) - (fac(6)), ((6) ^ (fac(6))) ^ (fac(6)), ((6) | (6)) % (fac(6)), ((6) | (6)) & (6), ((6) | (6)) | (6), ((6) | (fac(6))) % (fac(6)), ((6) | (fac(6))) & (6), ((6) | (fac(6))) - (fac(6)), ((6) | (fac(6))) ^ (fac(6)), ((fac(6)) % (6)) + (6), ((fac(6)) % (6)) ^ (6), ((fac(6)) % (6)) | (6), ((fac(6)) % (fac(6))) + (6), ((fac(6)) % (fac(6))) ^ (6), ((fac(6)) % (fac(6))) | (6), ((fac(6)) & (6)) + (6), ((fac(6)) & (6)) ^ (6), ((fac(6)) & (6)) | (6), ((fac(6)) * (6)) / (fac(6)), ((fac(6)) + (6)) % (fac(6)), ((fac(6)) + (6)) & (6), ((fac(6)) + (6)) - (fac(6)), ((fac(6)) + (6)) ^ (fac(6)), ((fac(6)) - (fac(6))) + (6), ((fac(6)) - (fac(6))) ^ (6), ((fac(6)) - (fac(6))) | (6), ((fac(6)) / (fac(6))) * (6), ((fac(6)) >> (fac(6))) + (6), ((fac(6)) >> (fac(6))) ^ (6), ((fac(6)) >> (fac(6))) | (6), ((fac(6)) ^ (6)) % (fac(6)), ((fac(6)) ^ (6)) & (6), ((fac(6)) ^ (6)) - (fac(6)), ((fac(6)) ^ (6)) ^ (fac(6)), ((fac(6)) ^ (fac(6))) + (6), ((fac(6)) ^ (fac(6))) ^ (6), ((fac(6)) ^ (fac(6))) | (6), ((fac(6)) | (6)) % (fac(6)), ((fac(6)) | (6)) & (6), ((fac(6)) | (6)) - (fac(6)), ((fac(6)) | (6)) ^ (fac(6)), (6) % ((6) * (6)), (6) % ((6) * (fac(6))), (6) % ((6) ** (6)), (6) % ((6) + (6)), (6) % ((6) + (fac(6))), (6) % ((6) - (fac(6))), (6) % ((6) << (6)), (6) % ((6) << (fac(6))), (6) % ((6) ^ (fac(6))), (6) % ((6) | (fac(6))), (6) % ((fac(6)) & (fac(6))), (6) % ((fac(6)) * (6)), (6) % ((fac(6)) * (fac(6))), (6) % ((fac(6)) ** (6)), (6) % ((fac(6)) + (6)), (6) % ((fac(6)) + (fac(6))), (6) % ((fac(6)) - (6)), (6) % ((fac(6)) / (6)), (6) % ((fac(6)) << (6)), (6) % ((fac(6)) << (fac(6))), (6) % ((fac(6)) >> (6)), (6) % ((fac(6)) ^ (6)), (6) % ((fac(6)) | (6)), (6) % ((fac(6)) | (fac(6))), (6) & ((6) % (fac(6))), (6) & ((6) & (6)), (6) & ((6) + (fac(6))), (6) & ((6) - (fac(6))), (6) & ((6) ^ (fac(6))), (6) & ((6) | (6)), (6) & ((6) | (fac(6))), (6) & ((fac(6)) + (6)), (6) & ((fac(6)) ^ (6)), (6) & ((fac(6)) | (6)), (6) * ((6) / (6)), (6) * ((fac(6)) / (fac(6))), (6) ** ((6) / (6)), (6) ** ((fac(6)) / (fac(6))), (6) + ((6) % (6)), (6) + ((6) & (fac(6))), (6) + ((6) - (6)), (6) + ((6) >> (6)), (6) + ((6) >> (fac(6))), (6) + ((6) ^ (6)), (6) + ((fac(6)) % (6)), (6) + ((fac(6)) % (fac(6))), (6) + ((fac(6)) & (6)), (6) + ((fac(6)) - (fac(6))), (6) + ((fac(6)) >> (fac(6))), (6) + ((fac(6)) ^ (fac(6))), (6) - ((6) % (6)), (6) - ((6) & (fac(6))), (6) - ((6) - (6)), (6) - ((6) >> (6)), (6) - ((6) >> (fac(6))), (6) - ((6) ^ (6)), (6) - ((fac(6)) % (6)), (6) - ((fac(6)) % (fac(6))), (6) - ((fac(6)) & (6)), (6) - ((fac(6)) - (fac(6))), (6) - ((fac(6)) >> (fac(6))), (6) - ((fac(6)) ^ (fac(6))), (6) / ((6) / (6)), (6) / ((fac(6)) / (fac(6))), (6) << ((6) % (6)), (6) << ((6) & (fac(6))), (6) << ((6) ** (6)), (6) << ((6) - (6)), (6) << ((6) << (6)), (6) << ((6) << (fac(6))), (6) << ((6) >> (6)), (6) << ((6) >> (fac(6))), (6) << ((6) ^ (6)), (6) << ((fac(6)) % (6)), (6) << ((fac(6)) % (fac(6))), (6) << ((fac(6)) & (6)), (6) << ((fac(6)) * (fac(6))), (6) << ((fac(6)) ** (6)), (6) << ((fac(6)) - (fac(6))), (6) << ((fac(6)) << (6)), (6) << ((fac(6)) << (fac(6))), (6) << ((fac(6)) >> (fac(6))), (6) << ((fac(6)) ^ (fac(6))), (6) >> ((6) % (6)), (6) >> ((6) & (fac(6))), (6) >> ((6) ** (6)), (6) >> ((6) - (6)), (6) >> ((6) << (6)), (6) >> ((6) << (fac(6))), (6) >> ((6) >> (6)), (6) >> ((6) >> (fac(6))), (6) >> ((6) ^ (6)), (6) >> ((fac(6)) % (6)), (6) >> ((fac(6)) % (fac(6))), (6) >> ((fac(6)) & (6)), (6) >> ((fac(6)) * (fac(6))), (6) >> ((fac(6)) ** (6)), (6) >> ((fac(6)) - (fac(6))), (6) >> ((fac(6)) << (6)), (6) >> ((fac(6)) << (fac(6))), (6) >> ((fac(6)) >> (fac(6))), (6) >> ((fac(6)) ^ (fac(6))), (6) ^ ((6) % (6)), (6) ^ ((6) & (fac(6))), (6) ^ ((6) - (6)), (6) ^ ((6) >> (6)), (6) ^ ((6) >> (fac(6))), (6) ^ ((6) ^ (6)), (6) ^ ((fac(6)) % (6)), (6) ^ ((fac(6)) % (fac(6))), (6) ^ ((fac(6)) & (6)), (6) ^ ((fac(6)) - (fac(6))), (6) ^ ((fac(6)) >> (fac(6))), (6) ^ ((fac(6)) ^ (fac(6))), (6) | ((6) % (6)), (6) | ((6) % (fac(6))), (6) | ((6) & (6)), (6) | ((6) & (fac(6))), (6) | ((6) - (6)), (6) | ((6) >> (6)), (6) | ((6) >> (fac(6))), (6) | ((6) ^ (6)), (6) | ((6) | (6)), (6) | ((fac(6)) % (6)), (6) | ((fac(6)) % (fac(6))), (6) | ((fac(6)) & (6)), (6) | ((fac(6)) - (fac(6))), (6) | ((fac(6)) >> (fac(6))), (6) | ((fac(6)) ^ (fac(6))), (fac(6)) % ((6) - (fac(6))), (fac(6)) % ((fac(6)) - (6)), (fac(6)) + ((6) - (fac(6))), (fac(6)) - ((fac(6)) - (6)), (fac(6)) / ((fac(6)) / (6)), (fac(6)) ^ ((6) + (fac(6))), (fac(6)) ^ ((6) ^ (fac(6))), (fac(6)) ^ ((6) | (fac(6))), (fac(6)) ^ ((fac(6)) + (6)), (fac(6)) ^ ((fac(6)) ^ (6)), (fac(6)) ^ ((fac(6)) | (6)), ].every((v) => v === 6);
7 1
ansSet.size() = 9
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[((7) + (7)) & (7), ((7) / (7)) ^ (7), ((fac(7)) / (7)) % (7), ((fac(7)) / (fac(7))) ^ (7), (7) & ((7) + (7)), (7) - ((7) / (7)), (7) - ((fac(7)) / (fac(7))), (7) ^ ((7) / (7)), (7) ^ ((fac(7)) / (fac(7))), ].every((v) => v === 6);
8 0
ansSet.size() = 0
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[].every((v) => v === 6);
9 1
ansSet.size() = 46
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[((9) % (fac(9))) - (sqrt(9)), ((9) & (9)) - (sqrt(9)), ((9) + (9)) / (sqrt(9)), ((9) - (sqrt(9))) % (9), ((9) - (sqrt(9))) % (fac(9)), ((9) - (sqrt(9))) << (fac(9)), ((9) - (sqrt(9))) >> (fac(9)), ((9) / (sqrt(9))) + (sqrt(9)), ((9) << (fac(9))) - (sqrt(9)), ((9) >> (fac(9))) - (sqrt(9)), ((9) | (9)) - (sqrt(9)), ((fac(9)) - (sqrt(9))) % (9), ((fac(9)) >> (9)) % (9), ((sqrt(9)) % (9)) + (sqrt(9)), ((sqrt(9)) % (fac(9))) + (sqrt(9)), ((sqrt(9)) & (sqrt(9))) + (sqrt(9)), ((sqrt(9)) * (sqrt(9))) - (sqrt(9)), ((sqrt(9)) + (sqrt(9))) % (9), ((sqrt(9)) + (sqrt(9))) % (fac(9)), ((sqrt(9)) + (sqrt(9))) << (fac(9)), ((sqrt(9)) + (sqrt(9))) >> (fac(9)), ((sqrt(9)) << (9)) % (9), ((sqrt(9)) << (fac(9))) + (sqrt(9)), ((sqrt(9)) << (sqrt(9))) % (9), ((sqrt(9)) >> (fac(9))) + (sqrt(9)), ((sqrt(9)) | (sqrt(9))) + (sqrt(9)), (9) - ((9) / (sqrt(9))), (9) - ((sqrt(9)) % (9)), (9) - ((sqrt(9)) % (fac(9))), (9) - ((sqrt(9)) & (sqrt(9))), (9) - ((sqrt(9)) << (fac(9))), (9) - ((sqrt(9)) >> (fac(9))), (9) - ((sqrt(9)) | (sqrt(9))), (sqrt(9)) + ((9) / (sqrt(9))), (sqrt(9)) + ((sqrt(9)) % (9)), (sqrt(9)) + ((sqrt(9)) % (fac(9))), (sqrt(9)) + ((sqrt(9)) & (sqrt(9))), (sqrt(9)) + ((sqrt(9)) << (fac(9))), (sqrt(9)) + ((sqrt(9)) >> (fac(9))), (sqrt(9)) + ((sqrt(9)) | (sqrt(9))), (sqrt(9)) << ((9) & (sqrt(9))), (sqrt(9)) << ((9) / (9)), (sqrt(9)) << ((9) >> (sqrt(9))), (sqrt(9)) << ((fac(9)) / (fac(9))), (sqrt(9)) << ((sqrt(9)) & (9)), (sqrt(9)) << ((sqrt(9)) / (sqrt(9))), ].every((v) => v === 6);
10 0
ansSet.size() = 0
let fac = (v) => v > 0 ? v * fac(v - 1) : 1, { sqrt } = Math;
[].every((v) => v === 6);
